import { SignatureV4CryptoInit, SignatureV4Init } from "@aws-sdk/signature-v4";
import { Credentials, HashConstructor, Provider, RegionInfoProvider, RequestSigner } from "@aws-sdk/types";
export interface AwsAuthInputConfig {
    
    credentials?: Credentials | Provider<Credentials>;
    
    signer?: RequestSigner | Provider<RequestSigner>;
    
    signingEscapePath?: boolean;
    
    systemClockOffset?: number;
    
    signingRegion?: string;
    
    signerConstructor?: new (options: SignatureV4Init & SignatureV4CryptoInit) => RequestSigner;
}
export interface SigV4AuthInputConfig {
    
    credentials?: Credentials | Provider<Credentials>;
    
    signer?: RequestSigner | Provider<RequestSigner>;
    
    signingEscapePath?: boolean;
    
    systemClockOffset?: number;
}
interface PreviouslyResolved {
    credentialDefaultProvider: (input: any) => Provider<Credentials>;
    region: string | Provider<string>;
    regionInfoProvider: RegionInfoProvider;
    signingName?: string;
    serviceId: string;
    sha256: HashConstructor;
    useFipsEndpoint: Provider<boolean>;
    useDualstackEndpoint: Provider<boolean>;
}
interface SigV4PreviouslyResolved {
    credentialDefaultProvider: (input: any) => Provider<Credentials>;
    region: string | Provider<string>;
    signingName: string;
    sha256: HashConstructor;
}
export interface AwsAuthResolvedConfig {
    
    credentials: Provider<Credentials>;
    
    signer: Provider<RequestSigner>;
    
    signingEscapePath: boolean;
    
    systemClockOffset: number;
}
export interface SigV4AuthResolvedConfig extends AwsAuthResolvedConfig {
}
export declare const resolveAwsAuthConfig: <T>(input: T & AwsAuthInputConfig & PreviouslyResolved) => T & AwsAuthResolvedConfig;
export declare const resolveSigV4AuthConfig: <T>(input: T & SigV4AuthInputConfig & SigV4PreviouslyResolved) => T & SigV4AuthResolvedConfig;
export {};
