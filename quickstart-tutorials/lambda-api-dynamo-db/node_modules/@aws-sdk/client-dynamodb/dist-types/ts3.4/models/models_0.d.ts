import { MetadataBearer as $MetadataBearer, SmithyException as __SmithyException } from "@aws-sdk/types";

export interface ArchivalSummary {
    
    ArchivalDateTime?: Date;
    
    ArchivalReason?: string;
    
    ArchivalBackupArn?: string;
}
export declare namespace ArchivalSummary {
    
    const filterSensitiveLog: (obj: ArchivalSummary) => any;
}
export declare type AttributeAction = "ADD" | "DELETE" | "PUT";
export declare type ScalarAttributeType = "B" | "N" | "S";

export interface AttributeDefinition {
    
    AttributeName: string | undefined;
    
    AttributeType: ScalarAttributeType | string | undefined;
}
export declare namespace AttributeDefinition {
    
    const filterSensitiveLog: (obj: AttributeDefinition) => any;
}

export interface AutoScalingTargetTrackingScalingPolicyConfigurationDescription {
    
    DisableScaleIn?: boolean;
    
    ScaleInCooldown?: number;
    
    ScaleOutCooldown?: number;
    
    TargetValue: number | undefined;
}
export declare namespace AutoScalingTargetTrackingScalingPolicyConfigurationDescription {
    
    const filterSensitiveLog: (obj: AutoScalingTargetTrackingScalingPolicyConfigurationDescription) => any;
}

export interface AutoScalingPolicyDescription {
    
    PolicyName?: string;
    
    TargetTrackingScalingPolicyConfiguration?: AutoScalingTargetTrackingScalingPolicyConfigurationDescription;
}
export declare namespace AutoScalingPolicyDescription {
    
    const filterSensitiveLog: (obj: AutoScalingPolicyDescription) => any;
}

export interface AutoScalingTargetTrackingScalingPolicyConfigurationUpdate {
    
    DisableScaleIn?: boolean;
    
    ScaleInCooldown?: number;
    
    ScaleOutCooldown?: number;
    
    TargetValue: number | undefined;
}
export declare namespace AutoScalingTargetTrackingScalingPolicyConfigurationUpdate {
    
    const filterSensitiveLog: (obj: AutoScalingTargetTrackingScalingPolicyConfigurationUpdate) => any;
}

export interface AutoScalingPolicyUpdate {
    
    PolicyName?: string;
    
    TargetTrackingScalingPolicyConfiguration: AutoScalingTargetTrackingScalingPolicyConfigurationUpdate | undefined;
}
export declare namespace AutoScalingPolicyUpdate {
    
    const filterSensitiveLog: (obj: AutoScalingPolicyUpdate) => any;
}

export interface AutoScalingSettingsDescription {
    
    MinimumUnits?: number;
    
    MaximumUnits?: number;
    
    AutoScalingDisabled?: boolean;
    
    AutoScalingRoleArn?: string;
    
    ScalingPolicies?: AutoScalingPolicyDescription[];
}
export declare namespace AutoScalingSettingsDescription {
    
    const filterSensitiveLog: (obj: AutoScalingSettingsDescription) => any;
}

export interface AutoScalingSettingsUpdate {
    
    MinimumUnits?: number;
    
    MaximumUnits?: number;
    
    AutoScalingDisabled?: boolean;
    
    AutoScalingRoleArn?: string;
    
    ScalingPolicyUpdate?: AutoScalingPolicyUpdate;
}
export declare namespace AutoScalingSettingsUpdate {
    
    const filterSensitiveLog: (obj: AutoScalingSettingsUpdate) => any;
}
export declare type BackupStatus = "AVAILABLE" | "CREATING" | "DELETED";
export declare enum BackupType {
    AWS_BACKUP = "AWS_BACKUP",
    SYSTEM = "SYSTEM",
    USER = "USER"
}

export interface BackupDetails {
    
    BackupArn: string | undefined;
    
    BackupName: string | undefined;
    
    BackupSizeBytes?: number;
    
    BackupStatus: BackupStatus | string | undefined;
    
    BackupType: BackupType | string | undefined;
    
    BackupCreationDateTime: Date | undefined;
    
    BackupExpiryDateTime?: Date;
}
export declare namespace BackupDetails {
    
    const filterSensitiveLog: (obj: BackupDetails) => any;
}
export declare type BillingMode = "PAY_PER_REQUEST" | "PROVISIONED";
export declare type KeyType = "HASH" | "RANGE";

export interface KeySchemaElement {
    
    AttributeName: string | undefined;
    
    KeyType: KeyType | string | undefined;
}
export declare namespace KeySchemaElement {
    
    const filterSensitiveLog: (obj: KeySchemaElement) => any;
}

export interface ProvisionedThroughput {
    
    ReadCapacityUnits: number | undefined;
    
    WriteCapacityUnits: number | undefined;
}
export declare namespace ProvisionedThroughput {
    
    const filterSensitiveLog: (obj: ProvisionedThroughput) => any;
}

export interface SourceTableDetails {
    
    TableName: string | undefined;
    
    TableId: string | undefined;
    
    TableArn?: string;
    
    TableSizeBytes?: number;
    
    KeySchema: KeySchemaElement[] | undefined;
    
    TableCreationDateTime: Date | undefined;
    
    ProvisionedThroughput: ProvisionedThroughput | undefined;
    
    ItemCount?: number;
    
    BillingMode?: BillingMode | string;
}
export declare namespace SourceTableDetails {
    
    const filterSensitiveLog: (obj: SourceTableDetails) => any;
}
export declare type ProjectionType = "ALL" | "INCLUDE" | "KEYS_ONLY";

export interface Projection {
    
    ProjectionType?: ProjectionType | string;
    
    NonKeyAttributes?: string[];
}
export declare namespace Projection {
    
    const filterSensitiveLog: (obj: Projection) => any;
}

export interface GlobalSecondaryIndexInfo {
    
    IndexName?: string;
    
    KeySchema?: KeySchemaElement[];
    
    Projection?: Projection;
    
    ProvisionedThroughput?: ProvisionedThroughput;
}
export declare namespace GlobalSecondaryIndexInfo {
    
    const filterSensitiveLog: (obj: GlobalSecondaryIndexInfo) => any;
}

export interface LocalSecondaryIndexInfo {
    
    IndexName?: string;
    
    KeySchema?: KeySchemaElement[];
    
    Projection?: Projection;
}
export declare namespace LocalSecondaryIndexInfo {
    
    const filterSensitiveLog: (obj: LocalSecondaryIndexInfo) => any;
}
export declare type SSEType = "AES256" | "KMS";
export declare type SSEStatus = "DISABLED" | "DISABLING" | "ENABLED" | "ENABLING" | "UPDATING";

export interface SSEDescription {
    
    Status?: SSEStatus | string;
    
    SSEType?: SSEType | string;
    
    KMSMasterKeyArn?: string;
    
    InaccessibleEncryptionDateTime?: Date;
}
export declare namespace SSEDescription {
    
    const filterSensitiveLog: (obj: SSEDescription) => any;
}
export declare type StreamViewType = "KEYS_ONLY" | "NEW_AND_OLD_IMAGES" | "NEW_IMAGE" | "OLD_IMAGE";

export interface StreamSpecification {
    
    StreamEnabled: boolean | undefined;
    
    StreamViewType?: StreamViewType | string;
}
export declare namespace StreamSpecification {
    
    const filterSensitiveLog: (obj: StreamSpecification) => any;
}
export declare type TimeToLiveStatus = "DISABLED" | "DISABLING" | "ENABLED" | "ENABLING";

export interface TimeToLiveDescription {
    
    TimeToLiveStatus?: TimeToLiveStatus | string;
    
    AttributeName?: string;
}
export declare namespace TimeToLiveDescription {
    
    const filterSensitiveLog: (obj: TimeToLiveDescription) => any;
}

export interface SourceTableFeatureDetails {
    
    LocalSecondaryIndexes?: LocalSecondaryIndexInfo[];
    
    GlobalSecondaryIndexes?: GlobalSecondaryIndexInfo[];
    
    StreamDescription?: StreamSpecification;
    
    TimeToLiveDescription?: TimeToLiveDescription;
    
    SSEDescription?: SSEDescription;
}
export declare namespace SourceTableFeatureDetails {
    
    const filterSensitiveLog: (obj: SourceTableFeatureDetails) => any;
}

export interface BackupDescription {
    
    BackupDetails?: BackupDetails;
    
    SourceTableDetails?: SourceTableDetails;
    
    SourceTableFeatureDetails?: SourceTableFeatureDetails;
}
export declare namespace BackupDescription {
    
    const filterSensitiveLog: (obj: BackupDescription) => any;
}

export interface BackupInUseException extends __SmithyException, $MetadataBearer {
    name: "BackupInUseException";
    $fault: "client";
    message?: string;
}

export interface BackupNotFoundException extends __SmithyException, $MetadataBearer {
    name: "BackupNotFoundException";
    $fault: "client";
    message?: string;
}

export interface BackupSummary {
    
    TableName?: string;
    
    TableId?: string;
    
    TableArn?: string;
    
    BackupArn?: string;
    
    BackupName?: string;
    
    BackupCreationDateTime?: Date;
    
    BackupExpiryDateTime?: Date;
    
    BackupStatus?: BackupStatus | string;
    
    BackupType?: BackupType | string;
    
    BackupSizeBytes?: number;
}
export declare namespace BackupSummary {
    
    const filterSensitiveLog: (obj: BackupSummary) => any;
}
export declare enum BackupTypeFilter {
    ALL = "ALL",
    AWS_BACKUP = "AWS_BACKUP",
    SYSTEM = "SYSTEM",
    USER = "USER"
}
export declare type ReturnConsumedCapacity = "INDEXES" | "NONE" | "TOTAL";

export interface Capacity {
    
    ReadCapacityUnits?: number;
    
    WriteCapacityUnits?: number;
    
    CapacityUnits?: number;
}
export declare namespace Capacity {
    
    const filterSensitiveLog: (obj: Capacity) => any;
}

export interface ConsumedCapacity {
    
    TableName?: string;
    
    CapacityUnits?: number;
    
    ReadCapacityUnits?: number;
    
    WriteCapacityUnits?: number;
    
    Table?: Capacity;
    
    LocalSecondaryIndexes?: {
        [key: string]: Capacity;
    };
    
    GlobalSecondaryIndexes?: {
        [key: string]: Capacity;
    };
}
export declare namespace ConsumedCapacity {
    
    const filterSensitiveLog: (obj: ConsumedCapacity) => any;
}
export declare enum BatchStatementErrorCodeEnum {
    AccessDenied = "AccessDenied",
    ConditionalCheckFailed = "ConditionalCheckFailed",
    DuplicateItem = "DuplicateItem",
    InternalServerError = "InternalServerError",
    ItemCollectionSizeLimitExceeded = "ItemCollectionSizeLimitExceeded",
    ProvisionedThroughputExceeded = "ProvisionedThroughputExceeded",
    RequestLimitExceeded = "RequestLimitExceeded",
    ResourceNotFound = "ResourceNotFound",
    ThrottlingError = "ThrottlingError",
    TransactionConflict = "TransactionConflict",
    ValidationError = "ValidationError"
}

export interface BatchStatementError {
    
    Code?: BatchStatementErrorCodeEnum | string;
    
    Message?: string;
}
export declare namespace BatchStatementError {
    
    const filterSensitiveLog: (obj: BatchStatementError) => any;
}

export interface InternalServerError extends __SmithyException, $MetadataBearer {
    name: "InternalServerError";
    $fault: "server";
    
    message?: string;
}

export interface RequestLimitExceeded extends __SmithyException, $MetadataBearer {
    name: "RequestLimitExceeded";
    $fault: "client";
    message?: string;
}
export interface InvalidEndpointException extends __SmithyException, $MetadataBearer {
    name: "InvalidEndpointException";
    $fault: "client";
    Message?: string;
}

export interface ProvisionedThroughputExceededException extends __SmithyException, $MetadataBearer {
    name: "ProvisionedThroughputExceededException";
    $fault: "client";
    
    message?: string;
}

export interface ResourceNotFoundException extends __SmithyException, $MetadataBearer {
    name: "ResourceNotFoundException";
    $fault: "client";
    
    message?: string;
}
export declare type ReturnItemCollectionMetrics = "NONE" | "SIZE";

export interface ItemCollectionSizeLimitExceededException extends __SmithyException, $MetadataBearer {
    name: "ItemCollectionSizeLimitExceededException";
    $fault: "client";
    
    message?: string;
}

export interface BillingModeSummary {
    
    BillingMode?: BillingMode | string;
    
    LastUpdateToPayPerRequestDateTime?: Date;
}
export declare namespace BillingModeSummary {
    
    const filterSensitiveLog: (obj: BillingModeSummary) => any;
}
export declare type ComparisonOperator = "BEGINS_WITH" | "BETWEEN" | "CONTAINS" | "EQ" | "GE" | "GT" | "IN" | "LE" | "LT" | "NE" | "NOT_CONTAINS" | "NOT_NULL" | "NULL";

export interface ConditionalCheckFailedException extends __SmithyException, $MetadataBearer {
    name: "ConditionalCheckFailedException";
    $fault: "client";
    
    message?: string;
}
export declare type ConditionalOperator = "AND" | "OR";
export declare type ReturnValuesOnConditionCheckFailure = "ALL_OLD" | "NONE";
export declare type ContinuousBackupsStatus = "DISABLED" | "ENABLED";
export declare type PointInTimeRecoveryStatus = "DISABLED" | "ENABLED";

export interface PointInTimeRecoveryDescription {
    
    PointInTimeRecoveryStatus?: PointInTimeRecoveryStatus | string;
    
    EarliestRestorableDateTime?: Date;
    
    LatestRestorableDateTime?: Date;
}
export declare namespace PointInTimeRecoveryDescription {
    
    const filterSensitiveLog: (obj: PointInTimeRecoveryDescription) => any;
}

export interface ContinuousBackupsDescription {
    
    ContinuousBackupsStatus: ContinuousBackupsStatus | string | undefined;
    
    PointInTimeRecoveryDescription?: PointInTimeRecoveryDescription;
}
export declare namespace ContinuousBackupsDescription {
    
    const filterSensitiveLog: (obj: ContinuousBackupsDescription) => any;
}

export interface ContinuousBackupsUnavailableException extends __SmithyException, $MetadataBearer {
    name: "ContinuousBackupsUnavailableException";
    $fault: "client";
    message?: string;
}
export declare type ContributorInsightsAction = "DISABLE" | "ENABLE";
export declare type ContributorInsightsStatus = "DISABLED" | "DISABLING" | "ENABLED" | "ENABLING" | "FAILED";

export interface ContributorInsightsSummary {
    
    TableName?: string;
    
    IndexName?: string;
    
    ContributorInsightsStatus?: ContributorInsightsStatus | string;
}
export declare namespace ContributorInsightsSummary {
    
    const filterSensitiveLog: (obj: ContributorInsightsSummary) => any;
}
export interface CreateBackupInput {
    
    TableName: string | undefined;
    
    BackupName: string | undefined;
}
export declare namespace CreateBackupInput {
    
    const filterSensitiveLog: (obj: CreateBackupInput) => any;
}
export interface CreateBackupOutput {
    
    BackupDetails?: BackupDetails;
}
export declare namespace CreateBackupOutput {
    
    const filterSensitiveLog: (obj: CreateBackupOutput) => any;
}

export interface LimitExceededException extends __SmithyException, $MetadataBearer {
    name: "LimitExceededException";
    $fault: "client";
    
    message?: string;
}

export interface TableInUseException extends __SmithyException, $MetadataBearer {
    name: "TableInUseException";
    $fault: "client";
    message?: string;
}

export interface TableNotFoundException extends __SmithyException, $MetadataBearer {
    name: "TableNotFoundException";
    $fault: "client";
    message?: string;
}

export interface CreateGlobalSecondaryIndexAction {
    
    IndexName: string | undefined;
    
    KeySchema: KeySchemaElement[] | undefined;
    
    Projection: Projection | undefined;
    
    ProvisionedThroughput?: ProvisionedThroughput;
}
export declare namespace CreateGlobalSecondaryIndexAction {
    
    const filterSensitiveLog: (obj: CreateGlobalSecondaryIndexAction) => any;
}

export interface Replica {
    
    RegionName?: string;
}
export declare namespace Replica {
    
    const filterSensitiveLog: (obj: Replica) => any;
}
export interface CreateGlobalTableInput {
    
    GlobalTableName: string | undefined;
    
    ReplicationGroup: Replica[] | undefined;
}
export declare namespace CreateGlobalTableInput {
    
    const filterSensitiveLog: (obj: CreateGlobalTableInput) => any;
}
export declare type GlobalTableStatus = "ACTIVE" | "CREATING" | "DELETING" | "UPDATING";

export interface ProvisionedThroughputOverride {
    
    ReadCapacityUnits?: number;
}
export declare namespace ProvisionedThroughputOverride {
    
    const filterSensitiveLog: (obj: ProvisionedThroughputOverride) => any;
}

export interface ReplicaGlobalSecondaryIndexDescription {
    
    IndexName?: string;
    
    ProvisionedThroughputOverride?: ProvisionedThroughputOverride;
}
export declare namespace ReplicaGlobalSecondaryIndexDescription {
    
    const filterSensitiveLog: (obj: ReplicaGlobalSecondaryIndexDescription) => any;
}
export declare type ReplicaStatus = "ACTIVE" | "CREATING" | "CREATION_FAILED" | "DELETING" | "INACCESSIBLE_ENCRYPTION_CREDENTIALS" | "REGION_DISABLED" | "UPDATING";
export declare enum TableClass {
    STANDARD = "STANDARD",
    STANDARD_INFREQUENT_ACCESS = "STANDARD_INFREQUENT_ACCESS"
}

export interface TableClassSummary {
    
    TableClass?: TableClass | string;
    
    LastUpdateDateTime?: Date;
}
export declare namespace TableClassSummary {
    
    const filterSensitiveLog: (obj: TableClassSummary) => any;
}

export interface ReplicaDescription {
    
    RegionName?: string;
    
    ReplicaStatus?: ReplicaStatus | string;
    
    ReplicaStatusDescription?: string;
    
    ReplicaStatusPercentProgress?: string;
    
    KMSMasterKeyId?: string;
    
    ProvisionedThroughputOverride?: ProvisionedThroughputOverride;
    
    GlobalSecondaryIndexes?: ReplicaGlobalSecondaryIndexDescription[];
    
    ReplicaInaccessibleDateTime?: Date;
    
    ReplicaTableClassSummary?: TableClassSummary;
}
export declare namespace ReplicaDescription {
    
    const filterSensitiveLog: (obj: ReplicaDescription) => any;
}

export interface GlobalTableDescription {
    
    ReplicationGroup?: ReplicaDescription[];
    
    GlobalTableArn?: string;
    
    CreationDateTime?: Date;
    
    GlobalTableStatus?: GlobalTableStatus | string;
    
    GlobalTableName?: string;
}
export declare namespace GlobalTableDescription {
    
    const filterSensitiveLog: (obj: GlobalTableDescription) => any;
}
export interface CreateGlobalTableOutput {
    
    GlobalTableDescription?: GlobalTableDescription;
}
export declare namespace CreateGlobalTableOutput {
    
    const filterSensitiveLog: (obj: CreateGlobalTableOutput) => any;
}

export interface GlobalTableAlreadyExistsException extends __SmithyException, $MetadataBearer {
    name: "GlobalTableAlreadyExistsException";
    $fault: "client";
    message?: string;
}

export interface CreateReplicaAction {
    
    RegionName: string | undefined;
}
export declare namespace CreateReplicaAction {
    
    const filterSensitiveLog: (obj: CreateReplicaAction) => any;
}

export interface ReplicaGlobalSecondaryIndex {
    
    IndexName: string | undefined;
    
    ProvisionedThroughputOverride?: ProvisionedThroughputOverride;
}
export declare namespace ReplicaGlobalSecondaryIndex {
    
    const filterSensitiveLog: (obj: ReplicaGlobalSecondaryIndex) => any;
}

export interface CreateReplicationGroupMemberAction {
    
    RegionName: string | undefined;
    
    KMSMasterKeyId?: string;
    
    ProvisionedThroughputOverride?: ProvisionedThroughputOverride;
    
    GlobalSecondaryIndexes?: ReplicaGlobalSecondaryIndex[];
    
    TableClassOverride?: TableClass | string;
}
export declare namespace CreateReplicationGroupMemberAction {
    
    const filterSensitiveLog: (obj: CreateReplicationGroupMemberAction) => any;
}

export interface GlobalSecondaryIndex {
    
    IndexName: string | undefined;
    
    KeySchema: KeySchemaElement[] | undefined;
    
    Projection: Projection | undefined;
    
    ProvisionedThroughput?: ProvisionedThroughput;
}
export declare namespace GlobalSecondaryIndex {
    
    const filterSensitiveLog: (obj: GlobalSecondaryIndex) => any;
}

export interface LocalSecondaryIndex {
    
    IndexName: string | undefined;
    
    KeySchema: KeySchemaElement[] | undefined;
    
    Projection: Projection | undefined;
}
export declare namespace LocalSecondaryIndex {
    
    const filterSensitiveLog: (obj: LocalSecondaryIndex) => any;
}

export interface SSESpecification {
    
    Enabled?: boolean;
    
    SSEType?: SSEType | string;
    
    KMSMasterKeyId?: string;
}
export declare namespace SSESpecification {
    
    const filterSensitiveLog: (obj: SSESpecification) => any;
}

export interface Tag {
    
    Key: string | undefined;
    
    Value: string | undefined;
}
export declare namespace Tag {
    
    const filterSensitiveLog: (obj: Tag) => any;
}

export interface CreateTableInput {
    
    AttributeDefinitions: AttributeDefinition[] | undefined;
    
    TableName: string | undefined;
    
    KeySchema: KeySchemaElement[] | undefined;
    
    LocalSecondaryIndexes?: LocalSecondaryIndex[];
    
    GlobalSecondaryIndexes?: GlobalSecondaryIndex[];
    
    BillingMode?: BillingMode | string;
    
    ProvisionedThroughput?: ProvisionedThroughput;
    
    StreamSpecification?: StreamSpecification;
    
    SSESpecification?: SSESpecification;
    
    Tags?: Tag[];
    
    TableClass?: TableClass | string;
}
export declare namespace CreateTableInput {
    
    const filterSensitiveLog: (obj: CreateTableInput) => any;
}
export declare type IndexStatus = "ACTIVE" | "CREATING" | "DELETING" | "UPDATING";

export interface ProvisionedThroughputDescription {
    
    LastIncreaseDateTime?: Date;
    
    LastDecreaseDateTime?: Date;
    
    NumberOfDecreasesToday?: number;
    
    ReadCapacityUnits?: number;
    
    WriteCapacityUnits?: number;
}
export declare namespace ProvisionedThroughputDescription {
    
    const filterSensitiveLog: (obj: ProvisionedThroughputDescription) => any;
}

export interface GlobalSecondaryIndexDescription {
    
    IndexName?: string;
    
    KeySchema?: KeySchemaElement[];
    
    Projection?: Projection;
    
    IndexStatus?: IndexStatus | string;
    
    Backfilling?: boolean;
    
    ProvisionedThroughput?: ProvisionedThroughputDescription;
    
    IndexSizeBytes?: number;
    
    ItemCount?: number;
    
    IndexArn?: string;
}
export declare namespace GlobalSecondaryIndexDescription {
    
    const filterSensitiveLog: (obj: GlobalSecondaryIndexDescription) => any;
}

export interface LocalSecondaryIndexDescription {
    
    IndexName?: string;
    
    KeySchema?: KeySchemaElement[];
    
    Projection?: Projection;
    
    IndexSizeBytes?: number;
    
    ItemCount?: number;
    
    IndexArn?: string;
}
export declare namespace LocalSecondaryIndexDescription {
    
    const filterSensitiveLog: (obj: LocalSecondaryIndexDescription) => any;
}

export interface RestoreSummary {
    
    SourceBackupArn?: string;
    
    SourceTableArn?: string;
    
    RestoreDateTime: Date | undefined;
    
    RestoreInProgress: boolean | undefined;
}
export declare namespace RestoreSummary {
    
    const filterSensitiveLog: (obj: RestoreSummary) => any;
}
export declare type TableStatus = "ACTIVE" | "ARCHIVED" | "ARCHIVING" | "CREATING" | "DELETING" | "INACCESSIBLE_ENCRYPTION_CREDENTIALS" | "UPDATING";

export interface TableDescription {
    
    AttributeDefinitions?: AttributeDefinition[];
    
    TableName?: string;
    
    KeySchema?: KeySchemaElement[];
    
    TableStatus?: TableStatus | string;
    
    CreationDateTime?: Date;
    
    ProvisionedThroughput?: ProvisionedThroughputDescription;
    
    TableSizeBytes?: number;
    
    ItemCount?: number;
    
    TableArn?: string;
    
    TableId?: string;
    
    BillingModeSummary?: BillingModeSummary;
    
    LocalSecondaryIndexes?: LocalSecondaryIndexDescription[];
    
    GlobalSecondaryIndexes?: GlobalSecondaryIndexDescription[];
    
    StreamSpecification?: StreamSpecification;
    
    LatestStreamLabel?: string;
    
    LatestStreamArn?: string;
    
    GlobalTableVersion?: string;
    
    Replicas?: ReplicaDescription[];
    
    RestoreSummary?: RestoreSummary;
    
    SSEDescription?: SSEDescription;
    
    ArchivalSummary?: ArchivalSummary;
    
    TableClassSummary?: TableClassSummary;
}
export declare namespace TableDescription {
    
    const filterSensitiveLog: (obj: TableDescription) => any;
}

export interface CreateTableOutput {
    
    TableDescription?: TableDescription;
}
export declare namespace CreateTableOutput {
    
    const filterSensitiveLog: (obj: CreateTableOutput) => any;
}

export interface ResourceInUseException extends __SmithyException, $MetadataBearer {
    name: "ResourceInUseException";
    $fault: "client";
    
    message?: string;
}
export interface DeleteBackupInput {
    
    BackupArn: string | undefined;
}
export declare namespace DeleteBackupInput {
    
    const filterSensitiveLog: (obj: DeleteBackupInput) => any;
}
export interface DeleteBackupOutput {
    
    BackupDescription?: BackupDescription;
}
export declare namespace DeleteBackupOutput {
    
    const filterSensitiveLog: (obj: DeleteBackupOutput) => any;
}

export interface DeleteGlobalSecondaryIndexAction {
    
    IndexName: string | undefined;
}
export declare namespace DeleteGlobalSecondaryIndexAction {
    
    const filterSensitiveLog: (obj: DeleteGlobalSecondaryIndexAction) => any;
}
export declare type ReturnValue = "ALL_NEW" | "ALL_OLD" | "NONE" | "UPDATED_NEW" | "UPDATED_OLD";

export interface TransactionConflictException extends __SmithyException, $MetadataBearer {
    name: "TransactionConflictException";
    $fault: "client";
    message?: string;
}

export interface DeleteReplicaAction {
    
    RegionName: string | undefined;
}
export declare namespace DeleteReplicaAction {
    
    const filterSensitiveLog: (obj: DeleteReplicaAction) => any;
}

export interface DeleteReplicationGroupMemberAction {
    
    RegionName: string | undefined;
}
export declare namespace DeleteReplicationGroupMemberAction {
    
    const filterSensitiveLog: (obj: DeleteReplicationGroupMemberAction) => any;
}

export interface DeleteTableInput {
    
    TableName: string | undefined;
}
export declare namespace DeleteTableInput {
    
    const filterSensitiveLog: (obj: DeleteTableInput) => any;
}

export interface DeleteTableOutput {
    
    TableDescription?: TableDescription;
}
export declare namespace DeleteTableOutput {
    
    const filterSensitiveLog: (obj: DeleteTableOutput) => any;
}
export interface DescribeBackupInput {
    
    BackupArn: string | undefined;
}
export declare namespace DescribeBackupInput {
    
    const filterSensitiveLog: (obj: DescribeBackupInput) => any;
}
export interface DescribeBackupOutput {
    
    BackupDescription?: BackupDescription;
}
export declare namespace DescribeBackupOutput {
    
    const filterSensitiveLog: (obj: DescribeBackupOutput) => any;
}
export interface DescribeContinuousBackupsInput {
    
    TableName: string | undefined;
}
export declare namespace DescribeContinuousBackupsInput {
    
    const filterSensitiveLog: (obj: DescribeContinuousBackupsInput) => any;
}
export interface DescribeContinuousBackupsOutput {
    
    ContinuousBackupsDescription?: ContinuousBackupsDescription;
}
export declare namespace DescribeContinuousBackupsOutput {
    
    const filterSensitiveLog: (obj: DescribeContinuousBackupsOutput) => any;
}
export interface DescribeContributorInsightsInput {
    
    TableName: string | undefined;
    
    IndexName?: string;
}
export declare namespace DescribeContributorInsightsInput {
    
    const filterSensitiveLog: (obj: DescribeContributorInsightsInput) => any;
}

export interface FailureException {
    
    ExceptionName?: string;
    
    ExceptionDescription?: string;
}
export declare namespace FailureException {
    
    const filterSensitiveLog: (obj: FailureException) => any;
}
export interface DescribeContributorInsightsOutput {
    
    TableName?: string;
    
    IndexName?: string;
    
    ContributorInsightsRuleList?: string[];
    
    ContributorInsightsStatus?: ContributorInsightsStatus | string;
    
    LastUpdateDateTime?: Date;
    
    FailureException?: FailureException;
}
export declare namespace DescribeContributorInsightsOutput {
    
    const filterSensitiveLog: (obj: DescribeContributorInsightsOutput) => any;
}
export interface DescribeEndpointsRequest {
}
export declare namespace DescribeEndpointsRequest {
    
    const filterSensitiveLog: (obj: DescribeEndpointsRequest) => any;
}

export interface Endpoint {
    
    Address: string | undefined;
    
    CachePeriodInMinutes: number | undefined;
}
export declare namespace Endpoint {
    
    const filterSensitiveLog: (obj: Endpoint) => any;
}
export interface DescribeEndpointsResponse {
    
    Endpoints: Endpoint[] | undefined;
}
export declare namespace DescribeEndpointsResponse {
    
    const filterSensitiveLog: (obj: DescribeEndpointsResponse) => any;
}
export interface DescribeExportInput {
    
    ExportArn: string | undefined;
}
export declare namespace DescribeExportInput {
    
    const filterSensitiveLog: (obj: DescribeExportInput) => any;
}
export declare enum ExportFormat {
    DYNAMODB_JSON = "DYNAMODB_JSON",
    ION = "ION"
}
export declare enum ExportStatus {
    COMPLETED = "COMPLETED",
    FAILED = "FAILED",
    IN_PROGRESS = "IN_PROGRESS"
}
export declare type S3SseAlgorithm = "AES256" | "KMS";

export interface ExportDescription {
    
    ExportArn?: string;
    
    ExportStatus?: ExportStatus | string;
    
    StartTime?: Date;
    
    EndTime?: Date;
    
    ExportManifest?: string;
    
    TableArn?: string;
    
    TableId?: string;
    
    ExportTime?: Date;
    
    ClientToken?: string;
    
    S3Bucket?: string;
    
    S3BucketOwner?: string;
    
    S3Prefix?: string;
    
    S3SseAlgorithm?: S3SseAlgorithm | string;
    
    S3SseKmsKeyId?: string;
    
    FailureCode?: string;
    
    FailureMessage?: string;
    
    ExportFormat?: ExportFormat | string;
    
    BilledSizeBytes?: number;
    
    ItemCount?: number;
}
export declare namespace ExportDescription {
    
    const filterSensitiveLog: (obj: ExportDescription) => any;
}
export interface DescribeExportOutput {
    
    ExportDescription?: ExportDescription;
}
export declare namespace DescribeExportOutput {
    
    const filterSensitiveLog: (obj: DescribeExportOutput) => any;
}

export interface ExportNotFoundException extends __SmithyException, $MetadataBearer {
    name: "ExportNotFoundException";
    $fault: "client";
    message?: string;
}
export interface DescribeGlobalTableInput {
    
    GlobalTableName: string | undefined;
}
export declare namespace DescribeGlobalTableInput {
    
    const filterSensitiveLog: (obj: DescribeGlobalTableInput) => any;
}
export interface DescribeGlobalTableOutput {
    
    GlobalTableDescription?: GlobalTableDescription;
}
export declare namespace DescribeGlobalTableOutput {
    
    const filterSensitiveLog: (obj: DescribeGlobalTableOutput) => any;
}

export interface GlobalTableNotFoundException extends __SmithyException, $MetadataBearer {
    name: "GlobalTableNotFoundException";
    $fault: "client";
    message?: string;
}
export interface DescribeGlobalTableSettingsInput {
    
    GlobalTableName: string | undefined;
}
export declare namespace DescribeGlobalTableSettingsInput {
    
    const filterSensitiveLog: (obj: DescribeGlobalTableSettingsInput) => any;
}

export interface ReplicaGlobalSecondaryIndexSettingsDescription {
    
    IndexName: string | undefined;
    
    IndexStatus?: IndexStatus | string;
    
    ProvisionedReadCapacityUnits?: number;
    
    ProvisionedReadCapacityAutoScalingSettings?: AutoScalingSettingsDescription;
    
    ProvisionedWriteCapacityUnits?: number;
    
    ProvisionedWriteCapacityAutoScalingSettings?: AutoScalingSettingsDescription;
}
export declare namespace ReplicaGlobalSecondaryIndexSettingsDescription {
    
    const filterSensitiveLog: (obj: ReplicaGlobalSecondaryIndexSettingsDescription) => any;
}

export interface ReplicaSettingsDescription {
    
    RegionName: string | undefined;
    
    ReplicaStatus?: ReplicaStatus | string;
    
    ReplicaBillingModeSummary?: BillingModeSummary;
    
    ReplicaProvisionedReadCapacityUnits?: number;
    
    ReplicaProvisionedReadCapacityAutoScalingSettings?: AutoScalingSettingsDescription;
    
    ReplicaProvisionedWriteCapacityUnits?: number;
    
    ReplicaProvisionedWriteCapacityAutoScalingSettings?: AutoScalingSettingsDescription;
    
    ReplicaGlobalSecondaryIndexSettings?: ReplicaGlobalSecondaryIndexSettingsDescription[];
    
    ReplicaTableClassSummary?: TableClassSummary;
}
export declare namespace ReplicaSettingsDescription {
    
    const filterSensitiveLog: (obj: ReplicaSettingsDescription) => any;
}
export interface DescribeGlobalTableSettingsOutput {
    
    GlobalTableName?: string;
    
    ReplicaSettings?: ReplicaSettingsDescription[];
}
export declare namespace DescribeGlobalTableSettingsOutput {
    
    const filterSensitiveLog: (obj: DescribeGlobalTableSettingsOutput) => any;
}
export interface DescribeKinesisStreamingDestinationInput {
    
    TableName: string | undefined;
}
export declare namespace DescribeKinesisStreamingDestinationInput {
    
    const filterSensitiveLog: (obj: DescribeKinesisStreamingDestinationInput) => any;
}
export declare type DestinationStatus = "ACTIVE" | "DISABLED" | "DISABLING" | "ENABLE_FAILED" | "ENABLING";

export interface KinesisDataStreamDestination {
    
    StreamArn?: string;
    
    DestinationStatus?: DestinationStatus | string;
    
    DestinationStatusDescription?: string;
}
export declare namespace KinesisDataStreamDestination {
    
    const filterSensitiveLog: (obj: KinesisDataStreamDestination) => any;
}
export interface DescribeKinesisStreamingDestinationOutput {
    
    TableName?: string;
    
    KinesisDataStreamDestinations?: KinesisDataStreamDestination[];
}
export declare namespace DescribeKinesisStreamingDestinationOutput {
    
    const filterSensitiveLog: (obj: DescribeKinesisStreamingDestinationOutput) => any;
}

export interface DescribeLimitsInput {
}
export declare namespace DescribeLimitsInput {
    
    const filterSensitiveLog: (obj: DescribeLimitsInput) => any;
}

export interface DescribeLimitsOutput {
    
    AccountMaxReadCapacityUnits?: number;
    
    AccountMaxWriteCapacityUnits?: number;
    
    TableMaxReadCapacityUnits?: number;
    
    TableMaxWriteCapacityUnits?: number;
}
export declare namespace DescribeLimitsOutput {
    
    const filterSensitiveLog: (obj: DescribeLimitsOutput) => any;
}

export interface DescribeTableInput {
    
    TableName: string | undefined;
}
export declare namespace DescribeTableInput {
    
    const filterSensitiveLog: (obj: DescribeTableInput) => any;
}

export interface DescribeTableOutput {
    
    Table?: TableDescription;
}
export declare namespace DescribeTableOutput {
    
    const filterSensitiveLog: (obj: DescribeTableOutput) => any;
}
export interface DescribeTableReplicaAutoScalingInput {
    
    TableName: string | undefined;
}
export declare namespace DescribeTableReplicaAutoScalingInput {
    
    const filterSensitiveLog: (obj: DescribeTableReplicaAutoScalingInput) => any;
}

export interface ReplicaGlobalSecondaryIndexAutoScalingDescription {
    
    IndexName?: string;
    
    IndexStatus?: IndexStatus | string;
    
    ProvisionedReadCapacityAutoScalingSettings?: AutoScalingSettingsDescription;
    
    ProvisionedWriteCapacityAutoScalingSettings?: AutoScalingSettingsDescription;
}
export declare namespace ReplicaGlobalSecondaryIndexAutoScalingDescription {
    
    const filterSensitiveLog: (obj: ReplicaGlobalSecondaryIndexAutoScalingDescription) => any;
}

export interface ReplicaAutoScalingDescription {
    
    RegionName?: string;
    
    GlobalSecondaryIndexes?: ReplicaGlobalSecondaryIndexAutoScalingDescription[];
    
    ReplicaProvisionedReadCapacityAutoScalingSettings?: AutoScalingSettingsDescription;
    
    ReplicaProvisionedWriteCapacityAutoScalingSettings?: AutoScalingSettingsDescription;
    
    ReplicaStatus?: ReplicaStatus | string;
}
export declare namespace ReplicaAutoScalingDescription {
    
    const filterSensitiveLog: (obj: ReplicaAutoScalingDescription) => any;
}

export interface TableAutoScalingDescription {
    
    TableName?: string;
    
    TableStatus?: TableStatus | string;
    
    Replicas?: ReplicaAutoScalingDescription[];
}
export declare namespace TableAutoScalingDescription {
    
    const filterSensitiveLog: (obj: TableAutoScalingDescription) => any;
}
export interface DescribeTableReplicaAutoScalingOutput {
    
    TableAutoScalingDescription?: TableAutoScalingDescription;
}
export declare namespace DescribeTableReplicaAutoScalingOutput {
    
    const filterSensitiveLog: (obj: DescribeTableReplicaAutoScalingOutput) => any;
}
export interface DescribeTimeToLiveInput {
    
    TableName: string | undefined;
}
export declare namespace DescribeTimeToLiveInput {
    
    const filterSensitiveLog: (obj: DescribeTimeToLiveInput) => any;
}
export interface DescribeTimeToLiveOutput {
    
    TimeToLiveDescription?: TimeToLiveDescription;
}
export declare namespace DescribeTimeToLiveOutput {
    
    const filterSensitiveLog: (obj: DescribeTimeToLiveOutput) => any;
}
export interface KinesisStreamingDestinationInput {
    
    TableName: string | undefined;
    
    StreamArn: string | undefined;
}
export declare namespace KinesisStreamingDestinationInput {
    
    const filterSensitiveLog: (obj: KinesisStreamingDestinationInput) => any;
}
export interface KinesisStreamingDestinationOutput {
    
    TableName?: string;
    
    StreamArn?: string;
    
    DestinationStatus?: DestinationStatus | string;
}
export declare namespace KinesisStreamingDestinationOutput {
    
    const filterSensitiveLog: (obj: KinesisStreamingDestinationOutput) => any;
}

export interface DuplicateItemException extends __SmithyException, $MetadataBearer {
    name: "DuplicateItemException";
    $fault: "client";
    message?: string;
}

export interface IdempotentParameterMismatchException extends __SmithyException, $MetadataBearer {
    name: "IdempotentParameterMismatchException";
    $fault: "client";
    Message?: string;
}

export interface TransactionInProgressException extends __SmithyException, $MetadataBearer {
    name: "TransactionInProgressException";
    $fault: "client";
    Message?: string;
}

export interface ExportConflictException extends __SmithyException, $MetadataBearer {
    name: "ExportConflictException";
    $fault: "client";
    message?: string;
}
export interface ExportTableToPointInTimeInput {
    
    TableArn: string | undefined;
    
    ExportTime?: Date;
    
    ClientToken?: string;
    
    S3Bucket: string | undefined;
    
    S3BucketOwner?: string;
    
    S3Prefix?: string;
    
    S3SseAlgorithm?: S3SseAlgorithm | string;
    
    S3SseKmsKeyId?: string;
    
    ExportFormat?: ExportFormat | string;
}
export declare namespace ExportTableToPointInTimeInput {
    
    const filterSensitiveLog: (obj: ExportTableToPointInTimeInput) => any;
}
export interface ExportTableToPointInTimeOutput {
    
    ExportDescription?: ExportDescription;
}
export declare namespace ExportTableToPointInTimeOutput {
    
    const filterSensitiveLog: (obj: ExportTableToPointInTimeOutput) => any;
}

export interface InvalidExportTimeException extends __SmithyException, $MetadataBearer {
    name: "InvalidExportTimeException";
    $fault: "client";
    message?: string;
}

export interface PointInTimeRecoveryUnavailableException extends __SmithyException, $MetadataBearer {
    name: "PointInTimeRecoveryUnavailableException";
    $fault: "client";
    message?: string;
}
export interface ListBackupsInput {
    
    TableName?: string;
    
    Limit?: number;
    
    TimeRangeLowerBound?: Date;
    
    TimeRangeUpperBound?: Date;
    
    ExclusiveStartBackupArn?: string;
    
    BackupType?: BackupTypeFilter | string;
}
export declare namespace ListBackupsInput {
    
    const filterSensitiveLog: (obj: ListBackupsInput) => any;
}
export interface ListBackupsOutput {
    
    BackupSummaries?: BackupSummary[];
    
    LastEvaluatedBackupArn?: string;
}
export declare namespace ListBackupsOutput {
    
    const filterSensitiveLog: (obj: ListBackupsOutput) => any;
}
export interface ListContributorInsightsInput {
    
    TableName?: string;
    
    NextToken?: string;
    
    MaxResults?: number;
}
export declare namespace ListContributorInsightsInput {
    
    const filterSensitiveLog: (obj: ListContributorInsightsInput) => any;
}
export interface ListContributorInsightsOutput {
    
    ContributorInsightsSummaries?: ContributorInsightsSummary[];
    
    NextToken?: string;
}
export declare namespace ListContributorInsightsOutput {
    
    const filterSensitiveLog: (obj: ListContributorInsightsOutput) => any;
}
export interface ListExportsInput {
    
    TableArn?: string;
    
    MaxResults?: number;
    
    NextToken?: string;
}
export declare namespace ListExportsInput {
    
    const filterSensitiveLog: (obj: ListExportsInput) => any;
}

export interface ExportSummary {
    
    ExportArn?: string;
    
    ExportStatus?: ExportStatus | string;
}
export declare namespace ExportSummary {
    
    const filterSensitiveLog: (obj: ExportSummary) => any;
}
export interface ListExportsOutput {
    
    ExportSummaries?: ExportSummary[];
    
    NextToken?: string;
}
export declare namespace ListExportsOutput {
    
    const filterSensitiveLog: (obj: ListExportsOutput) => any;
}
export interface ListGlobalTablesInput {
    
    ExclusiveStartGlobalTableName?: string;
    
    Limit?: number;
    
    RegionName?: string;
}
export declare namespace ListGlobalTablesInput {
    
    const filterSensitiveLog: (obj: ListGlobalTablesInput) => any;
}

export interface GlobalTable {
    
    GlobalTableName?: string;
    
    ReplicationGroup?: Replica[];
}
export declare namespace GlobalTable {
    
    const filterSensitiveLog: (obj: GlobalTable) => any;
}
export interface ListGlobalTablesOutput {
    
    GlobalTables?: GlobalTable[];
    
    LastEvaluatedGlobalTableName?: string;
}
export declare namespace ListGlobalTablesOutput {
    
    const filterSensitiveLog: (obj: ListGlobalTablesOutput) => any;
}

export interface ListTablesInput {
    
    ExclusiveStartTableName?: string;
    
    Limit?: number;
}
export declare namespace ListTablesInput {
    
    const filterSensitiveLog: (obj: ListTablesInput) => any;
}

export interface ListTablesOutput {
    
    TableNames?: string[];
    
    LastEvaluatedTableName?: string;
}
export declare namespace ListTablesOutput {
    
    const filterSensitiveLog: (obj: ListTablesOutput) => any;
}
export interface ListTagsOfResourceInput {
    
    ResourceArn: string | undefined;
    
    NextToken?: string;
}
export declare namespace ListTagsOfResourceInput {
    
    const filterSensitiveLog: (obj: ListTagsOfResourceInput) => any;
}
export interface ListTagsOfResourceOutput {
    
    Tags?: Tag[];
    
    NextToken?: string;
}
export declare namespace ListTagsOfResourceOutput {
    
    const filterSensitiveLog: (obj: ListTagsOfResourceOutput) => any;
}
export declare type Select = "ALL_ATTRIBUTES" | "ALL_PROJECTED_ATTRIBUTES" | "COUNT" | "SPECIFIC_ATTRIBUTES";
export interface RestoreTableFromBackupInput {
    
    TargetTableName: string | undefined;
    
    BackupArn: string | undefined;
    
    BillingModeOverride?: BillingMode | string;
    
    GlobalSecondaryIndexOverride?: GlobalSecondaryIndex[];
    
    LocalSecondaryIndexOverride?: LocalSecondaryIndex[];
    
    ProvisionedThroughputOverride?: ProvisionedThroughput;
    
    SSESpecificationOverride?: SSESpecification;
}
export declare namespace RestoreTableFromBackupInput {
    
    const filterSensitiveLog: (obj: RestoreTableFromBackupInput) => any;
}
export interface RestoreTableFromBackupOutput {
    
    TableDescription?: TableDescription;
}
export declare namespace RestoreTableFromBackupOutput {
    
    const filterSensitiveLog: (obj: RestoreTableFromBackupOutput) => any;
}

export interface TableAlreadyExistsException extends __SmithyException, $MetadataBearer {
    name: "TableAlreadyExistsException";
    $fault: "client";
    message?: string;
}

export interface InvalidRestoreTimeException extends __SmithyException, $MetadataBearer {
    name: "InvalidRestoreTimeException";
    $fault: "client";
    message?: string;
}
export interface RestoreTableToPointInTimeInput {
    
    SourceTableArn?: string;
    
    SourceTableName?: string;
    
    TargetTableName: string | undefined;
    
    UseLatestRestorableTime?: boolean;
    
    RestoreDateTime?: Date;
    
    BillingModeOverride?: BillingMode | string;
    
    GlobalSecondaryIndexOverride?: GlobalSecondaryIndex[];
    
    LocalSecondaryIndexOverride?: LocalSecondaryIndex[];
    
    ProvisionedThroughputOverride?: ProvisionedThroughput;
    
    SSESpecificationOverride?: SSESpecification;
}
export declare namespace RestoreTableToPointInTimeInput {
    
    const filterSensitiveLog: (obj: RestoreTableToPointInTimeInput) => any;
}
export interface RestoreTableToPointInTimeOutput {
    
    TableDescription?: TableDescription;
}
export declare namespace RestoreTableToPointInTimeOutput {
    
    const filterSensitiveLog: (obj: RestoreTableToPointInTimeOutput) => any;
}
export interface TagResourceInput {
    
    ResourceArn: string | undefined;
    
    Tags: Tag[] | undefined;
}
export declare namespace TagResourceInput {
    
    const filterSensitiveLog: (obj: TagResourceInput) => any;
}
export interface UntagResourceInput {
    
    ResourceArn: string | undefined;
    
    TagKeys: string[] | undefined;
}
export declare namespace UntagResourceInput {
    
    const filterSensitiveLog: (obj: UntagResourceInput) => any;
}

export interface PointInTimeRecoverySpecification {
    
    PointInTimeRecoveryEnabled: boolean | undefined;
}
export declare namespace PointInTimeRecoverySpecification {
    
    const filterSensitiveLog: (obj: PointInTimeRecoverySpecification) => any;
}
export interface UpdateContinuousBackupsInput {
    
    TableName: string | undefined;
    
    PointInTimeRecoverySpecification: PointInTimeRecoverySpecification | undefined;
}
export declare namespace UpdateContinuousBackupsInput {
    
    const filterSensitiveLog: (obj: UpdateContinuousBackupsInput) => any;
}
export interface UpdateContinuousBackupsOutput {
    
    ContinuousBackupsDescription?: ContinuousBackupsDescription;
}
export declare namespace UpdateContinuousBackupsOutput {
    
    const filterSensitiveLog: (obj: UpdateContinuousBackupsOutput) => any;
}
export interface UpdateContributorInsightsInput {
    
    TableName: string | undefined;
    
    IndexName?: string;
    
    ContributorInsightsAction: ContributorInsightsAction | string | undefined;
}
export declare namespace UpdateContributorInsightsInput {
    
    const filterSensitiveLog: (obj: UpdateContributorInsightsInput) => any;
}
export interface UpdateContributorInsightsOutput {
    
    TableName?: string;
    
    IndexName?: string;
    
    ContributorInsightsStatus?: ContributorInsightsStatus | string;
}
export declare namespace UpdateContributorInsightsOutput {
    
    const filterSensitiveLog: (obj: UpdateContributorInsightsOutput) => any;
}

export interface ReplicaAlreadyExistsException extends __SmithyException, $MetadataBearer {
    name: "ReplicaAlreadyExistsException";
    $fault: "client";
    message?: string;
}

export interface ReplicaNotFoundException extends __SmithyException, $MetadataBearer {
    name: "ReplicaNotFoundException";
    $fault: "client";
    message?: string;
}

export interface ReplicaUpdate {
    
    Create?: CreateReplicaAction;
    
    Delete?: DeleteReplicaAction;
}
export declare namespace ReplicaUpdate {
    
    const filterSensitiveLog: (obj: ReplicaUpdate) => any;
}
export interface UpdateGlobalTableInput {
    
    GlobalTableName: string | undefined;
    
    ReplicaUpdates: ReplicaUpdate[] | undefined;
}
export declare namespace UpdateGlobalTableInput {
    
    const filterSensitiveLog: (obj: UpdateGlobalTableInput) => any;
}
export interface UpdateGlobalTableOutput {
    
    GlobalTableDescription?: GlobalTableDescription;
}
export declare namespace UpdateGlobalTableOutput {
    
    const filterSensitiveLog: (obj: UpdateGlobalTableOutput) => any;
}

export interface IndexNotFoundException extends __SmithyException, $MetadataBearer {
    name: "IndexNotFoundException";
    $fault: "client";
    message?: string;
}

export interface GlobalTableGlobalSecondaryIndexSettingsUpdate {
    
    IndexName: string | undefined;
    
    ProvisionedWriteCapacityUnits?: number;
    
    ProvisionedWriteCapacityAutoScalingSettingsUpdate?: AutoScalingSettingsUpdate;
}
export declare namespace GlobalTableGlobalSecondaryIndexSettingsUpdate {
    
    const filterSensitiveLog: (obj: GlobalTableGlobalSecondaryIndexSettingsUpdate) => any;
}

export interface ReplicaGlobalSecondaryIndexSettingsUpdate {
    
    IndexName: string | undefined;
    
    ProvisionedReadCapacityUnits?: number;
    
    ProvisionedReadCapacityAutoScalingSettingsUpdate?: AutoScalingSettingsUpdate;
}
export declare namespace ReplicaGlobalSecondaryIndexSettingsUpdate {
    
    const filterSensitiveLog: (obj: ReplicaGlobalSecondaryIndexSettingsUpdate) => any;
}

export interface ReplicaSettingsUpdate {
    
    RegionName: string | undefined;
    
    ReplicaProvisionedReadCapacityUnits?: number;
    
    ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate?: AutoScalingSettingsUpdate;
    
    ReplicaGlobalSecondaryIndexSettingsUpdate?: ReplicaGlobalSecondaryIndexSettingsUpdate[];
    
    ReplicaTableClass?: TableClass | string;
}
export declare namespace ReplicaSettingsUpdate {
    
    const filterSensitiveLog: (obj: ReplicaSettingsUpdate) => any;
}
export interface UpdateGlobalTableSettingsInput {
    
    GlobalTableName: string | undefined;
    
    GlobalTableBillingMode?: BillingMode | string;
    
    GlobalTableProvisionedWriteCapacityUnits?: number;
    
    GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate?: AutoScalingSettingsUpdate;
    
    GlobalTableGlobalSecondaryIndexSettingsUpdate?: GlobalTableGlobalSecondaryIndexSettingsUpdate[];
    
    ReplicaSettingsUpdate?: ReplicaSettingsUpdate[];
}
export declare namespace UpdateGlobalTableSettingsInput {
    
    const filterSensitiveLog: (obj: UpdateGlobalTableSettingsInput) => any;
}
export interface UpdateGlobalTableSettingsOutput {
    
    GlobalTableName?: string;
    
    ReplicaSettings?: ReplicaSettingsDescription[];
}
export declare namespace UpdateGlobalTableSettingsOutput {
    
    const filterSensitiveLog: (obj: UpdateGlobalTableSettingsOutput) => any;
}

export interface UpdateGlobalSecondaryIndexAction {
    
    IndexName: string | undefined;
    
    ProvisionedThroughput: ProvisionedThroughput | undefined;
}
export declare namespace UpdateGlobalSecondaryIndexAction {
    
    const filterSensitiveLog: (obj: UpdateGlobalSecondaryIndexAction) => any;
}

export interface GlobalSecondaryIndexUpdate {
    
    Update?: UpdateGlobalSecondaryIndexAction;
    
    Create?: CreateGlobalSecondaryIndexAction;
    
    Delete?: DeleteGlobalSecondaryIndexAction;
}
export declare namespace GlobalSecondaryIndexUpdate {
    
    const filterSensitiveLog: (obj: GlobalSecondaryIndexUpdate) => any;
}

export interface UpdateReplicationGroupMemberAction {
    
    RegionName: string | undefined;
    
    KMSMasterKeyId?: string;
    
    ProvisionedThroughputOverride?: ProvisionedThroughputOverride;
    
    GlobalSecondaryIndexes?: ReplicaGlobalSecondaryIndex[];
    
    TableClassOverride?: TableClass | string;
}
export declare namespace UpdateReplicationGroupMemberAction {
    
    const filterSensitiveLog: (obj: UpdateReplicationGroupMemberAction) => any;
}

export interface ReplicationGroupUpdate {
    
    Create?: CreateReplicationGroupMemberAction;
    
    Update?: UpdateReplicationGroupMemberAction;
    
    Delete?: DeleteReplicationGroupMemberAction;
}
export declare namespace ReplicationGroupUpdate {
    
    const filterSensitiveLog: (obj: ReplicationGroupUpdate) => any;
}

export interface UpdateTableInput {
    
    AttributeDefinitions?: AttributeDefinition[];
    
    TableName: string | undefined;
    
    BillingMode?: BillingMode | string;
    
    ProvisionedThroughput?: ProvisionedThroughput;
    
    GlobalSecondaryIndexUpdates?: GlobalSecondaryIndexUpdate[];
    
    StreamSpecification?: StreamSpecification;
    
    SSESpecification?: SSESpecification;
    
    ReplicaUpdates?: ReplicationGroupUpdate[];
    
    TableClass?: TableClass | string;
}
export declare namespace UpdateTableInput {
    
    const filterSensitiveLog: (obj: UpdateTableInput) => any;
}

export interface UpdateTableOutput {
    
    TableDescription?: TableDescription;
}
export declare namespace UpdateTableOutput {
    
    const filterSensitiveLog: (obj: UpdateTableOutput) => any;
}

export interface GlobalSecondaryIndexAutoScalingUpdate {
    
    IndexName?: string;
    
    ProvisionedWriteCapacityAutoScalingUpdate?: AutoScalingSettingsUpdate;
}
export declare namespace GlobalSecondaryIndexAutoScalingUpdate {
    
    const filterSensitiveLog: (obj: GlobalSecondaryIndexAutoScalingUpdate) => any;
}

export interface ReplicaGlobalSecondaryIndexAutoScalingUpdate {
    
    IndexName?: string;
    
    ProvisionedReadCapacityAutoScalingUpdate?: AutoScalingSettingsUpdate;
}
export declare namespace ReplicaGlobalSecondaryIndexAutoScalingUpdate {
    
    const filterSensitiveLog: (obj: ReplicaGlobalSecondaryIndexAutoScalingUpdate) => any;
}

export interface ReplicaAutoScalingUpdate {
    
    RegionName: string | undefined;
    
    ReplicaGlobalSecondaryIndexUpdates?: ReplicaGlobalSecondaryIndexAutoScalingUpdate[];
    
    ReplicaProvisionedReadCapacityAutoScalingUpdate?: AutoScalingSettingsUpdate;
}
export declare namespace ReplicaAutoScalingUpdate {
    
    const filterSensitiveLog: (obj: ReplicaAutoScalingUpdate) => any;
}
export interface UpdateTableReplicaAutoScalingInput {
    
    GlobalSecondaryIndexUpdates?: GlobalSecondaryIndexAutoScalingUpdate[];
    
    TableName: string | undefined;
    
    ProvisionedWriteCapacityAutoScalingUpdate?: AutoScalingSettingsUpdate;
    
    ReplicaUpdates?: ReplicaAutoScalingUpdate[];
}
export declare namespace UpdateTableReplicaAutoScalingInput {
    
    const filterSensitiveLog: (obj: UpdateTableReplicaAutoScalingInput) => any;
}
export interface UpdateTableReplicaAutoScalingOutput {
    
    TableAutoScalingDescription?: TableAutoScalingDescription;
}
export declare namespace UpdateTableReplicaAutoScalingOutput {
    
    const filterSensitiveLog: (obj: UpdateTableReplicaAutoScalingOutput) => any;
}

export interface TimeToLiveSpecification {
    
    Enabled: boolean | undefined;
    
    AttributeName: string | undefined;
}
export declare namespace TimeToLiveSpecification {
    
    const filterSensitiveLog: (obj: TimeToLiveSpecification) => any;
}

export interface UpdateTimeToLiveInput {
    
    TableName: string | undefined;
    
    TimeToLiveSpecification: TimeToLiveSpecification | undefined;
}
export declare namespace UpdateTimeToLiveInput {
    
    const filterSensitiveLog: (obj: UpdateTimeToLiveInput) => any;
}
export interface UpdateTimeToLiveOutput {
    
    TimeToLiveSpecification?: TimeToLiveSpecification;
}
export declare namespace UpdateTimeToLiveOutput {
    
    const filterSensitiveLog: (obj: UpdateTimeToLiveOutput) => any;
}

export declare type AttributeValue = AttributeValue.BMember | AttributeValue.BOOLMember | AttributeValue.BSMember | AttributeValue.LMember | AttributeValue.MMember | AttributeValue.NMember | AttributeValue.NSMember | AttributeValue.NULLMember | AttributeValue.SMember | AttributeValue.SSMember | AttributeValue.$UnknownMember;
export declare namespace AttributeValue {
    
    interface SMember {
        S: string;
        N?: never;
        B?: never;
        SS?: never;
        NS?: never;
        BS?: never;
        M?: never;
        L?: never;
        NULL?: never;
        BOOL?: never;
        $unknown?: never;
    }
    
    interface NMember {
        S?: never;
        N: string;
        B?: never;
        SS?: never;
        NS?: never;
        BS?: never;
        M?: never;
        L?: never;
        NULL?: never;
        BOOL?: never;
        $unknown?: never;
    }
    
    interface BMember {
        S?: never;
        N?: never;
        B: Uint8Array;
        SS?: never;
        NS?: never;
        BS?: never;
        M?: never;
        L?: never;
        NULL?: never;
        BOOL?: never;
        $unknown?: never;
    }
    
    interface SSMember {
        S?: never;
        N?: never;
        B?: never;
        SS: string[];
        NS?: never;
        BS?: never;
        M?: never;
        L?: never;
        NULL?: never;
        BOOL?: never;
        $unknown?: never;
    }
    
    interface NSMember {
        S?: never;
        N?: never;
        B?: never;
        SS?: never;
        NS: string[];
        BS?: never;
        M?: never;
        L?: never;
        NULL?: never;
        BOOL?: never;
        $unknown?: never;
    }
    
    interface BSMember {
        S?: never;
        N?: never;
        B?: never;
        SS?: never;
        NS?: never;
        BS: Uint8Array[];
        M?: never;
        L?: never;
        NULL?: never;
        BOOL?: never;
        $unknown?: never;
    }
    
    interface MMember {
        S?: never;
        N?: never;
        B?: never;
        SS?: never;
        NS?: never;
        BS?: never;
        M: {
            [key: string]: AttributeValue;
        };
        L?: never;
        NULL?: never;
        BOOL?: never;
        $unknown?: never;
    }
    
    interface LMember {
        S?: never;
        N?: never;
        B?: never;
        SS?: never;
        NS?: never;
        BS?: never;
        M?: never;
        L: AttributeValue[];
        NULL?: never;
        BOOL?: never;
        $unknown?: never;
    }
    
    interface NULLMember {
        S?: never;
        N?: never;
        B?: never;
        SS?: never;
        NS?: never;
        BS?: never;
        M?: never;
        L?: never;
        NULL: boolean;
        BOOL?: never;
        $unknown?: never;
    }
    
    interface BOOLMember {
        S?: never;
        N?: never;
        B?: never;
        SS?: never;
        NS?: never;
        BS?: never;
        M?: never;
        L?: never;
        NULL?: never;
        BOOL: boolean;
        $unknown?: never;
    }
    interface $UnknownMember {
        S?: never;
        N?: never;
        B?: never;
        SS?: never;
        NS?: never;
        BS?: never;
        M?: never;
        L?: never;
        NULL?: never;
        BOOL?: never;
        $unknown: [
            string,
            any
        ];
    }
    interface Visitor<T> {
        S: (value: string) => T;
        N: (value: string) => T;
        B: (value: Uint8Array) => T;
        SS: (value: string[]) => T;
        NS: (value: string[]) => T;
        BS: (value: Uint8Array[]) => T;
        M: (value: {
            [key: string]: AttributeValue;
        }) => T;
        L: (value: AttributeValue[]) => T;
        NULL: (value: boolean) => T;
        BOOL: (value: boolean) => T;
        _: (name: string, value: any) => T;
    }
    const visit: <T>(value: AttributeValue, visitor: Visitor<T>) => T;
    
    const filterSensitiveLog: (obj: AttributeValue) => any;
}

export interface AttributeValueUpdate {
    
    Value?: AttributeValue;
    
    Action?: AttributeAction | string;
}
export declare namespace AttributeValueUpdate {
    
    const filterSensitiveLog: (obj: AttributeValueUpdate) => any;
}

export interface BatchStatementRequest {
    
    Statement: string | undefined;
    
    Parameters?: AttributeValue[];
    
    ConsistentRead?: boolean;
}
export declare namespace BatchStatementRequest {
    
    const filterSensitiveLog: (obj: BatchStatementRequest) => any;
}

export interface BatchStatementResponse {
    
    Error?: BatchStatementError;
    
    TableName?: string;
    
    Item?: {
        [key: string]: AttributeValue;
    };
}
export declare namespace BatchStatementResponse {
    
    const filterSensitiveLog: (obj: BatchStatementResponse) => any;
}

export interface CancellationReason {
    
    Item?: {
        [key: string]: AttributeValue;
    };
    
    Code?: string;
    
    Message?: string;
}
export declare namespace CancellationReason {
    
    const filterSensitiveLog: (obj: CancellationReason) => any;
}

export interface Condition {
    
    AttributeValueList?: AttributeValue[];
    
    ComparisonOperator: ComparisonOperator | string | undefined;
}
export declare namespace Condition {
    
    const filterSensitiveLog: (obj: Condition) => any;
}

export interface DeleteRequest {
    
    Key: {
        [key: string]: AttributeValue;
    } | undefined;
}
export declare namespace DeleteRequest {
    
    const filterSensitiveLog: (obj: DeleteRequest) => any;
}
export interface ExecuteStatementInput {
    
    Statement: string | undefined;
    
    Parameters?: AttributeValue[];
    
    ConsistentRead?: boolean;
    
    NextToken?: string;
    
    ReturnConsumedCapacity?: ReturnConsumedCapacity | string;
}
export declare namespace ExecuteStatementInput {
    
    const filterSensitiveLog: (obj: ExecuteStatementInput) => any;
}

export interface Get {
    
    Key: {
        [key: string]: AttributeValue;
    } | undefined;
    
    TableName: string | undefined;
    
    ProjectionExpression?: string;
    
    ExpressionAttributeNames?: {
        [key: string]: string;
    };
}
export declare namespace Get {
    
    const filterSensitiveLog: (obj: Get) => any;
}

export interface GetItemInput {
    
    TableName: string | undefined;
    
    Key: {
        [key: string]: AttributeValue;
    } | undefined;
    
    AttributesToGet?: string[];
    
    ConsistentRead?: boolean;
    
    ReturnConsumedCapacity?: ReturnConsumedCapacity | string;
    
    ProjectionExpression?: string;
    
    ExpressionAttributeNames?: {
        [key: string]: string;
    };
}
export declare namespace GetItemInput {
    
    const filterSensitiveLog: (obj: GetItemInput) => any;
}

export interface GetItemOutput {
    
    Item?: {
        [key: string]: AttributeValue;
    };
    
    ConsumedCapacity?: ConsumedCapacity;
}
export declare namespace GetItemOutput {
    
    const filterSensitiveLog: (obj: GetItemOutput) => any;
}

export interface ItemCollectionMetrics {
    
    ItemCollectionKey?: {
        [key: string]: AttributeValue;
    };
    
    SizeEstimateRangeGB?: number[];
}
export declare namespace ItemCollectionMetrics {
    
    const filterSensitiveLog: (obj: ItemCollectionMetrics) => any;
}

export interface ItemResponse {
    
    Item?: {
        [key: string]: AttributeValue;
    };
}
export declare namespace ItemResponse {
    
    const filterSensitiveLog: (obj: ItemResponse) => any;
}

export interface ParameterizedStatement {
    
    Statement: string | undefined;
    
    Parameters?: AttributeValue[];
}
export declare namespace ParameterizedStatement {
    
    const filterSensitiveLog: (obj: ParameterizedStatement) => any;
}

export interface PutRequest {
    
    Item: {
        [key: string]: AttributeValue;
    } | undefined;
}
export declare namespace PutRequest {
    
    const filterSensitiveLog: (obj: PutRequest) => any;
}
export interface ExecuteStatementOutput {
    
    Items?: {
        [key: string]: AttributeValue;
    }[];
    
    NextToken?: string;
    
    ConsumedCapacity?: ConsumedCapacity;
}
export declare namespace ExecuteStatementOutput {
    
    const filterSensitiveLog: (obj: ExecuteStatementOutput) => any;
}

export interface KeysAndAttributes {
    
    Keys: {
        [key: string]: AttributeValue;
    }[] | undefined;
    
    AttributesToGet?: string[];
    
    ConsistentRead?: boolean;
    
    ProjectionExpression?: string;
    
    ExpressionAttributeNames?: {
        [key: string]: string;
    };
}
export declare namespace KeysAndAttributes {
    
    const filterSensitiveLog: (obj: KeysAndAttributes) => any;
}

export interface TransactGetItem {
    
    Get: Get | undefined;
}
export declare namespace TransactGetItem {
    
    const filterSensitiveLog: (obj: TransactGetItem) => any;
}
export interface BatchExecuteStatementInput {
    
    Statements: BatchStatementRequest[] | undefined;
    
    ReturnConsumedCapacity?: ReturnConsumedCapacity | string;
}
export declare namespace BatchExecuteStatementInput {
    
    const filterSensitiveLog: (obj: BatchExecuteStatementInput) => any;
}
export interface BatchExecuteStatementOutput {
    
    Responses?: BatchStatementResponse[];
    
    ConsumedCapacity?: ConsumedCapacity[];
}
export declare namespace BatchExecuteStatementOutput {
    
    const filterSensitiveLog: (obj: BatchExecuteStatementOutput) => any;
}
export interface ExecuteTransactionInput {
    
    TransactStatements: ParameterizedStatement[] | undefined;
    
    ClientRequestToken?: string;
    
    ReturnConsumedCapacity?: ReturnConsumedCapacity | string;
}
export declare namespace ExecuteTransactionInput {
    
    const filterSensitiveLog: (obj: ExecuteTransactionInput) => any;
}
export interface ExecuteTransactionOutput {
    
    Responses?: ItemResponse[];
    
    ConsumedCapacity?: ConsumedCapacity[];
}
export declare namespace ExecuteTransactionOutput {
    
    const filterSensitiveLog: (obj: ExecuteTransactionOutput) => any;
}
export interface TransactGetItemsOutput {
    
    ConsumedCapacity?: ConsumedCapacity[];
    
    Responses?: ItemResponse[];
}
export declare namespace TransactGetItemsOutput {
    
    const filterSensitiveLog: (obj: TransactGetItemsOutput) => any;
}

export interface TransactionCanceledException extends __SmithyException, $MetadataBearer {
    name: "TransactionCanceledException";
    $fault: "client";
    Message?: string;
    
    CancellationReasons?: CancellationReason[];
}

export interface BatchGetItemInput {
    
    RequestItems: {
        [key: string]: KeysAndAttributes;
    } | undefined;
    
    ReturnConsumedCapacity?: ReturnConsumedCapacity | string;
}
export declare namespace BatchGetItemInput {
    
    const filterSensitiveLog: (obj: BatchGetItemInput) => any;
}

export interface ExpectedAttributeValue {
    
    Value?: AttributeValue;
    
    Exists?: boolean;
    
    ComparisonOperator?: ComparisonOperator | string;
    
    AttributeValueList?: AttributeValue[];
}
export declare namespace ExpectedAttributeValue {
    
    const filterSensitiveLog: (obj: ExpectedAttributeValue) => any;
}
export interface TransactGetItemsInput {
    
    TransactItems: TransactGetItem[] | undefined;
    
    ReturnConsumedCapacity?: ReturnConsumedCapacity | string;
}
export declare namespace TransactGetItemsInput {
    
    const filterSensitiveLog: (obj: TransactGetItemsInput) => any;
}
export interface TransactWriteItemsOutput {
    
    ConsumedCapacity?: ConsumedCapacity[];
    
    ItemCollectionMetrics?: {
        [key: string]: ItemCollectionMetrics[];
    };
}
export declare namespace TransactWriteItemsOutput {
    
    const filterSensitiveLog: (obj: TransactWriteItemsOutput) => any;
}

export interface ConditionCheck {
    
    Key: {
        [key: string]: AttributeValue;
    } | undefined;
    
    TableName: string | undefined;
    
    ConditionExpression: string | undefined;
    
    ExpressionAttributeNames?: {
        [key: string]: string;
    };
    
    ExpressionAttributeValues?: {
        [key: string]: AttributeValue;
    };
    
    ReturnValuesOnConditionCheckFailure?: ReturnValuesOnConditionCheckFailure | string;
}
export declare namespace ConditionCheck {
    
    const filterSensitiveLog: (obj: ConditionCheck) => any;
}

export interface Delete {
    
    Key: {
        [key: string]: AttributeValue;
    } | undefined;
    
    TableName: string | undefined;
    
    ConditionExpression?: string;
    
    ExpressionAttributeNames?: {
        [key: string]: string;
    };
    
    ExpressionAttributeValues?: {
        [key: string]: AttributeValue;
    };
    
    ReturnValuesOnConditionCheckFailure?: ReturnValuesOnConditionCheckFailure | string;
}
export declare namespace Delete {
    
    const filterSensitiveLog: (obj: Delete) => any;
}

export interface Put {
    
    Item: {
        [key: string]: AttributeValue;
    } | undefined;
    
    TableName: string | undefined;
    
    ConditionExpression?: string;
    
    ExpressionAttributeNames?: {
        [key: string]: string;
    };
    
    ExpressionAttributeValues?: {
        [key: string]: AttributeValue;
    };
    
    ReturnValuesOnConditionCheckFailure?: ReturnValuesOnConditionCheckFailure | string;
}
export declare namespace Put {
    
    const filterSensitiveLog: (obj: Put) => any;
}

export interface Update {
    
    Key: {
        [key: string]: AttributeValue;
    } | undefined;
    
    UpdateExpression: string | undefined;
    
    TableName: string | undefined;
    
    ConditionExpression?: string;
    
    ExpressionAttributeNames?: {
        [key: string]: string;
    };
    
    ExpressionAttributeValues?: {
        [key: string]: AttributeValue;
    };
    
    ReturnValuesOnConditionCheckFailure?: ReturnValuesOnConditionCheckFailure | string;
}
export declare namespace Update {
    
    const filterSensitiveLog: (obj: Update) => any;
}

export interface DeleteItemOutput {
    
    Attributes?: {
        [key: string]: AttributeValue;
    };
    
    ConsumedCapacity?: ConsumedCapacity;
    
    ItemCollectionMetrics?: ItemCollectionMetrics;
}
export declare namespace DeleteItemOutput {
    
    const filterSensitiveLog: (obj: DeleteItemOutput) => any;
}

export interface PutItemOutput {
    
    Attributes?: {
        [key: string]: AttributeValue;
    };
    
    ConsumedCapacity?: ConsumedCapacity;
    
    ItemCollectionMetrics?: ItemCollectionMetrics;
}
export declare namespace PutItemOutput {
    
    const filterSensitiveLog: (obj: PutItemOutput) => any;
}

export interface QueryOutput {
    
    Items?: {
        [key: string]: AttributeValue;
    }[];
    
    Count?: number;
    
    ScannedCount?: number;
    
    LastEvaluatedKey?: {
        [key: string]: AttributeValue;
    };
    
    ConsumedCapacity?: ConsumedCapacity;
}
export declare namespace QueryOutput {
    
    const filterSensitiveLog: (obj: QueryOutput) => any;
}

export interface ScanOutput {
    
    Items?: {
        [key: string]: AttributeValue;
    }[];
    
    Count?: number;
    
    ScannedCount?: number;
    
    LastEvaluatedKey?: {
        [key: string]: AttributeValue;
    };
    
    ConsumedCapacity?: ConsumedCapacity;
}
export declare namespace ScanOutput {
    
    const filterSensitiveLog: (obj: ScanOutput) => any;
}

export interface UpdateItemOutput {
    
    Attributes?: {
        [key: string]: AttributeValue;
    };
    
    ConsumedCapacity?: ConsumedCapacity;
    
    ItemCollectionMetrics?: ItemCollectionMetrics;
}
export declare namespace UpdateItemOutput {
    
    const filterSensitiveLog: (obj: UpdateItemOutput) => any;
}

export interface WriteRequest {
    
    PutRequest?: PutRequest;
    
    DeleteRequest?: DeleteRequest;
}
export declare namespace WriteRequest {
    
    const filterSensitiveLog: (obj: WriteRequest) => any;
}

export interface BatchGetItemOutput {
    
    Responses?: {
        [key: string]: {
            [key: string]: AttributeValue;
        }[];
    };
    
    UnprocessedKeys?: {
        [key: string]: KeysAndAttributes;
    };
    
    ConsumedCapacity?: ConsumedCapacity[];
}
export declare namespace BatchGetItemOutput {
    
    const filterSensitiveLog: (obj: BatchGetItemOutput) => any;
}

export interface ScanInput {
    
    TableName: string | undefined;
    
    IndexName?: string;
    
    AttributesToGet?: string[];
    
    Limit?: number;
    
    Select?: Select | string;
    
    ScanFilter?: {
        [key: string]: Condition;
    };
    
    ConditionalOperator?: ConditionalOperator | string;
    
    ExclusiveStartKey?: {
        [key: string]: AttributeValue;
    };
    
    ReturnConsumedCapacity?: ReturnConsumedCapacity | string;
    
    TotalSegments?: number;
    
    Segment?: number;
    
    ProjectionExpression?: string;
    
    FilterExpression?: string;
    
    ExpressionAttributeNames?: {
        [key: string]: string;
    };
    
    ExpressionAttributeValues?: {
        [key: string]: AttributeValue;
    };
    
    ConsistentRead?: boolean;
}
export declare namespace ScanInput {
    
    const filterSensitiveLog: (obj: ScanInput) => any;
}

export interface BatchWriteItemInput {
    
    RequestItems: {
        [key: string]: WriteRequest[];
    } | undefined;
    
    ReturnConsumedCapacity?: ReturnConsumedCapacity | string;
    
    ReturnItemCollectionMetrics?: ReturnItemCollectionMetrics | string;
}
export declare namespace BatchWriteItemInput {
    
    const filterSensitiveLog: (obj: BatchWriteItemInput) => any;
}

export interface DeleteItemInput {
    
    TableName: string | undefined;
    
    Key: {
        [key: string]: AttributeValue;
    } | undefined;
    
    Expected?: {
        [key: string]: ExpectedAttributeValue;
    };
    
    ConditionalOperator?: ConditionalOperator | string;
    
    ReturnValues?: ReturnValue | string;
    
    ReturnConsumedCapacity?: ReturnConsumedCapacity | string;
    
    ReturnItemCollectionMetrics?: ReturnItemCollectionMetrics | string;
    
    ConditionExpression?: string;
    
    ExpressionAttributeNames?: {
        [key: string]: string;
    };
    
    ExpressionAttributeValues?: {
        [key: string]: AttributeValue;
    };
}
export declare namespace DeleteItemInput {
    
    const filterSensitiveLog: (obj: DeleteItemInput) => any;
}

export interface PutItemInput {
    
    TableName: string | undefined;
    
    Item: {
        [key: string]: AttributeValue;
    } | undefined;
    
    Expected?: {
        [key: string]: ExpectedAttributeValue;
    };
    
    ReturnValues?: ReturnValue | string;
    
    ReturnConsumedCapacity?: ReturnConsumedCapacity | string;
    
    ReturnItemCollectionMetrics?: ReturnItemCollectionMetrics | string;
    
    ConditionalOperator?: ConditionalOperator | string;
    
    ConditionExpression?: string;
    
    ExpressionAttributeNames?: {
        [key: string]: string;
    };
    
    ExpressionAttributeValues?: {
        [key: string]: AttributeValue;
    };
}
export declare namespace PutItemInput {
    
    const filterSensitiveLog: (obj: PutItemInput) => any;
}

export interface QueryInput {
    
    TableName: string | undefined;
    
    IndexName?: string;
    
    Select?: Select | string;
    
    AttributesToGet?: string[];
    
    Limit?: number;
    
    ConsistentRead?: boolean;
    
    KeyConditions?: {
        [key: string]: Condition;
    };
    
    QueryFilter?: {
        [key: string]: Condition;
    };
    
    ConditionalOperator?: ConditionalOperator | string;
    
    ScanIndexForward?: boolean;
    
    ExclusiveStartKey?: {
        [key: string]: AttributeValue;
    };
    
    ReturnConsumedCapacity?: ReturnConsumedCapacity | string;
    
    ProjectionExpression?: string;
    
    FilterExpression?: string;
    
    KeyConditionExpression?: string;
    
    ExpressionAttributeNames?: {
        [key: string]: string;
    };
    
    ExpressionAttributeValues?: {
        [key: string]: AttributeValue;
    };
}
export declare namespace QueryInput {
    
    const filterSensitiveLog: (obj: QueryInput) => any;
}

export interface BatchWriteItemOutput {
    
    UnprocessedItems?: {
        [key: string]: WriteRequest[];
    };
    
    ItemCollectionMetrics?: {
        [key: string]: ItemCollectionMetrics[];
    };
    
    ConsumedCapacity?: ConsumedCapacity[];
}
export declare namespace BatchWriteItemOutput {
    
    const filterSensitiveLog: (obj: BatchWriteItemOutput) => any;
}

export interface UpdateItemInput {
    
    TableName: string | undefined;
    
    Key: {
        [key: string]: AttributeValue;
    } | undefined;
    
    AttributeUpdates?: {
        [key: string]: AttributeValueUpdate;
    };
    
    Expected?: {
        [key: string]: ExpectedAttributeValue;
    };
    
    ConditionalOperator?: ConditionalOperator | string;
    
    ReturnValues?: ReturnValue | string;
    
    ReturnConsumedCapacity?: ReturnConsumedCapacity | string;
    
    ReturnItemCollectionMetrics?: ReturnItemCollectionMetrics | string;
    
    UpdateExpression?: string;
    
    ConditionExpression?: string;
    
    ExpressionAttributeNames?: {
        [key: string]: string;
    };
    
    ExpressionAttributeValues?: {
        [key: string]: AttributeValue;
    };
}
export declare namespace UpdateItemInput {
    
    const filterSensitiveLog: (obj: UpdateItemInput) => any;
}

export interface TransactWriteItem {
    
    ConditionCheck?: ConditionCheck;
    
    Put?: Put;
    
    Delete?: Delete;
    
    Update?: Update;
}
export declare namespace TransactWriteItem {
    
    const filterSensitiveLog: (obj: TransactWriteItem) => any;
}
export interface TransactWriteItemsInput {
    
    TransactItems: TransactWriteItem[] | undefined;
    
    ReturnConsumedCapacity?: ReturnConsumedCapacity | string;
    
    ReturnItemCollectionMetrics?: ReturnItemCollectionMetrics | string;
    
    ClientRequestToken?: string;
}
export declare namespace TransactWriteItemsInput {
    
    const filterSensitiveLog: (obj: TransactWriteItemsInput) => any;
}
